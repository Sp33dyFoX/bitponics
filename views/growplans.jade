extends layout

block head
  script
    $(document).bind("mobileinit", function(){
      //$.mobile.autoInitializePage = false;
      $.mobile.page.prototype.options.keepNative = "textarea, input[type=checkbox], input[type=radio], input[type=text], input[type=submit], input.search, select";
      $.mobile.ajaxLinksEnabled = false;
    });
  script(src='/assets/js/libs/jquery/jquery.mobile-1.2.0.js')
  //- script(src='/assets/js/libs/jquery.mobile.custom/jquery.mobile.custom.js')
block css
  link(rel='stylesheet', href='/assets/css/libs/steps.css')
  link(rel='stylesheet', href='/assets/css/libs/jquery.mobile-1.2.0.css')

  //- TEMP hacks
  style
    .phase-slider { height: auto !important; background: gray;}
    input[type=radio].ng-binding { opacity : 1; height: auto; width: auto; }

block content

  section#header
    header#logo(role="banner") 
      img(src="/img/leaf-new-green.png", width="15%")

    div#setup.select-block
      h2.main-heading #{title}
      h3.sub-heading Selection
      //h3.sub-heading
    div#user.select-block
      h2.main-heading User
      h3.sub-heading
          if user.name.full != 'undefined undefined' && user.name.full != ''
           | #{user.name.full}
          else
           | #{user.email}

  section#main(role="main", ng-app="GrowPlanModule")
    div.content-module.middle
      form(id="growplans", name="growplans", class='steps', data-ajax="false", ng-submit="submit()", ng-controller="Bitponics.pages.growplans.GrowPlanController", novalidate)
        h4 Let's find you a grow plan.         
        section(id="system_selection", class="step", data-required="1")
          h4 What type of system do you have?
          ul(class="grid photos")
            li(ng-repeat="system in growSystems | orderBy:name")
              input(id="{{system._id}}", type='radio', name="growSystem", value="{{system._id}}", ng-model="growSystemSelections[system._id]", ng-change="updateSelectedGrowSystem(this)")
              label(for="{{system._id}}") {{system.name}}

        section(id="plant_selection", class="step")
          h4 What would you like to grow?

          input(class="search no-validate", ng-model="plantQuery", ng-change="filterPlantList()")
          div(ng-hide="filteredPlantList.length") 
            button(class="add", ng-click="addPlant()") Add
          
          ul(class="grid sortlist")
            li(ng-repeat="plant in filteredPlantList | orderBy:name")
              input(id="{{plant._id}}", type='checkbox', name="plants", value="{{plant._id}}", ng-model="plantSelections[plant._id]", ng-change="updateSelectedPlants()")
              label(for="{{plant._id}}", class="plant") {{plant.name}}

        section(id="growplan_results", class="step update-panel hide", data-required="1")
          h4 We've found grow plans for you
          ul(class="grid sortlist photos")
            each growPlan, i in growPlans
              li(id="gplist_#{growPlan.id}")
                input(id="gplist_input_#{growPlan.id}", type='radio', name="growplans", value="#{growPlan.id}", ng-model="selectedGrowPlanId", ng-change="setSelectedGrowPlan()")
                label(for="gplist_input_#{growPlan.id}") #{growPlan.name}
                  div.info
                    div(class="gplist_description") #{growPlan.description}
                    div(class="gplist_plants")
                      each plant in growPlan.plants
                        | #{plant.name} 
                    ul(class="gplist_system")
                      each phase in growPlan.phases
                        li #{phase.growSystem.name}

          //Default grow plans not filtered
          ul(class="grid sortlist photos default")
            li(id="gplist_#{growPlanDefault.id}")
              input(id="gplist_input_#{growPlanDefault.id}", type='radio', name="growplans", value="#{growPlanDefault.id}", ng-model="selectedGrowPlanId", ng-change="setSelectedGrowPlan()")
              label(for="gplist_input_#{growPlanDefault.id}") #{growPlanDefault.name}
                div.info
                  div(class="gplist_description") #{growPlanDefault.description}
                  ul(class="gplist_system")
                      each phase in growPlanDefault.phases
                        li #{phase.growSystem.name}

        section(id="growplan_edit", class="hide")
          h4 Tailor this grow plan to your needs

          //set as default grow plan, will change dynamically based on previous step selection
          input(id="gpedit__id", type="hidden", name="parentGrowPlan", ng-model="selectedGrowPlan._id") 

          label Name
          input(id="gpedit_name", type='text', name="gpedit_name", ng-model="selectedGrowPlan.name")
          
          label Description
          textarea(id="gpedit_description", name="gpedit_description", ng-model="selectedGrowPlan.description")

          label Plants
          ul(class="grid plantlist")
            //textarea(id="gpedit_plants", type='text', name="gpedit_plants", value="#{growPlanDefault.plants}")
            li(ng-repeat="plant in selectedGrowPlan.plants | orderBy:name")
              input(id="{{plant._id}}", type='checkbox', name="plants", ng-model="plant._id")
              label(for="{{plant._id}}", class="plant") {{plant.name}}

          //- label Suggested Sensors
          //- input(id="gpedit_sensors", type='text', name="gpedit_sensors", value="#{growPlanDefault.sensors}")

          //- label Suggested Accessories *Aggregated from the accessories(controls) across phases.actions, phases.phaseEndActions, and phases.idealRanges
          //- input(id="gpedit_controls", type='text', name="gpedit_controls", value="#{growPlanDefault.controls}")

          div.Phases
            div.phaseRangeSlider
              div.phase-current-indicator
                span This grow plan lasts  
                input(type="number", name="phase_slider_duration", id="phase_slider_duration", class="no-disable", value="182", ng-model="expectedGrowPlanDuration", ng-change="updatePhaseDurations()") 
                span days and I am on day  
                input(type="range", name="phase_slider_current", id="phase_slider_current", class="no-disable", value="0", min="0", max="182", ng-model="currentGrowPlanDay")
                
              div.phase-sliders
                ul(class="phase-tabs")
                  li(ng-repeat="phase in selectedGrowPlan.phases") {{phase.name}}
                    div(class="remove icon btn")
                      | <i class="icon-glyph icon-x" aria-hidden="true"></i>
                  li() Add New Phase
                    div(class="add icon btn")
                      | <i class="icon-glyph icon-plus" aria-hidden="true"></i>

                  div(ng-repeat="phase in selectedGrowPlan.phases", class="phase-slider")
                    div(class="phase-slider-info")
                      span(class="date-range") x
                      input(class="date-duration no-disable", name="date-duration", value="0", type="number", ng-model="phase.expectedNumberOfDays") 
                      span  days
                    div(class="phase-slider-slider")
                      input(type="range", name="phase_slider_{{$index}}", id="phase_slider_{{$index}}", class="phase-slider-input", value="0", min="0", max="{{expectedGrowPlanDuration}}", ng-model="phase.expectedNumberOfDays")

                    section
                      div.phaseName
                        label Phase Name
                        input(type="text", placeholder="Give this phase a name...", ng-model="phase.name")

                      div.phaseDescription
                        label Phase Description
                        textarea(placeholder="Write a phase description...", ng-model="phase.description")

                      div.growSystem
                        label Grow System
                        select(ng-model="phase.growSystem._id", ng-options="growSystem._id as growSystem.name for growSystem in growSystems")
                        
                      div.growMedium
                        label Grow Medium
                        input(type='text', ng-model="phase.growMedium")
                      
                      div.nutrients
                        label Nutrients
                        ul.grid
                          li(ng-repeat="nutrient in phase.nutrients")
                            input(id="gpedit_{{phase._id}}_nutrients", type='checkbox', name="gpedit_{{phase._id}}_nutrients", value="{{nutrient.id}}", checked=true)
                            label(for="gpedit_{{phase._id}}_nutrients") {{nutrient.name}} - {{nutrient.brand}}

                      
                      div.idealRanges
                        //- Assuming Phases would be h5
                        h6 Ideal Sensor Ranges
                        p Here's where you describe the ideal values for your sensors throughout this phase. If your sensor readings get out of range,
                          | we'll send you an alert. You can also specify an accessory to trigger on or off, and even specify the time of day 
                          | that the ideal range should apply.
                        ul
                          li.add
                            div(class="add icon btn", ng-click="addIdealRange(this)")
                              | <i class="icon-glyph icon-plus" aria-hidden="true"></i>
                              
                          li.closed(ng-repeat="idealRange in phase.idealRanges")
                            div(class="sensor-type icon {{idealRange.sCode}}")
                              | <i class="icon-glyph icon-{{idealRange.sCode}}" aria-hidden="true"></i>
                              div.screen-reader-text {{idealRange.sCode}}
                            
                            label {{sensors[idealRange.sCode].name}}
                              select(ng-model="idealRange.sCode", ng-options="sensor.code as sensor.name for (sensorKey,sensor) in sensors | orderBy:name")
                                option(value="") Select Sensor
                            
                            label Trigger the following accessory (optional):
                              select(ng-model="idealRange.actionBelowMin.control", ng-options="control._id as control.name for (controlKey,control) in controls")
                                option(value="") None
                            
                            div.lo
                              label Low
                                input(class="no-disable", type="number", ng-model="idealRange.valueRange.min")
                              span {{sensors[idealRange.sCode].unit}}
                              textarea(placeholder="Describe the triggered action.", ng-model="idealRange.actionBelowMin.description")
                              div(ng-show="idealRange.actionBelowMin.control") Turn {{controls[idealRange.actionBelowMin.control].name}} to {{idealRange.actionBelowMin.singleStateValue}}

                            div.hi
                              label High
                                input(class="no-disable", type="number", ng-model="idealRange.valueRange.max")
                              span {{sensors[idealRange.sCode].unit}}
                              textarea(placeholder="Describe the triggered action.", ng-model="idealRange.actionBelowMin.description")
                              div(ng-show="idealRange.actionAboveMax.control") Turn {{controls[idealRange.actionAboveMax.control].name}} to {{idealRange.actionAboveMax.singleStateValue}}

                            div
                              | What time of day should the ideal range apply?
                              label All Day
                                input(class="no-disable", type="checkbox", ng-model="idealRange.noApplicableTimeSpan", ng-click="toggleIdealRangeApplicableTimeSpan(this)")

                              div.idealRange-applicableTimePicker(ng-hide="idealRange.noApplicableTimeSpan")
                                // TODO: figure out how initialize values when idealRange.applicableTimeSpan is undefined (and leave them alone when it is defined)
                                label.idealRangeStartTime Start Time
                                  select(ng-required="!idealRange.noApplicableTimeSpan", ng-model="idealRange.applicableTimeSpan.startTime", ng-options="time.ms as time.str for time in timesOfDayList")

                                label.idealRangeEndTime End Time
                                  select(ng-required="!idealRange.noApplicableTimeSpan", ng-model="idealRange.applicableTimeSpan.endTime", ng-options="time.ms as time.str for time in timesOfDayList")


                      div.actions
                        h6 Actions
                        p Here's where you set schedules for actions to take throughout the phase. You can create on/off cycles for accessories or just schedule simple notifications
                          | for yourself. If you specify an accessory and have it connected to your Bitponics device, we'll simply trigger its cycles automatically. 
                          | If you don't have a specified accessory connected to your device, instead we'll send you an email notification whenever an action should take place.
                        
                        ul
                          li.add
                            div(class="add icon btn", ng-click="addAction(this)")
                              | <i class="icon-glyph icon-plus" aria-hidden="true"></i>
                          
                          li(ng-repeat="action in phase.actionsViewModel") Action
                            
                            label Description
                              textarea(placeholder="Describe the action.", ng-model="action.description")

                            label Trigger the following accessory (optional):
                              select(class="no-disable", ng-model="action.control", ng-options="control._id as control.name for (controlKey,control) in controls")
                                option(value="") None

                            div Scheduling. Trigger this action:
                              label 
                                input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_schedule", value="phaseStart", ng-model="action.scheduleType")
                                | Once at the start of the phase

                              label
                                input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_schedule", value="phaseEnd", ng-model="action.scheduleType") 
                                | Once at the end of the phase

                              label 
                                input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_schedule", value="repeat", ng-model="action.scheduleType") 
                                | Repeat throughout the phase

                            div(ng-show="action.scheduleType != 'repeat'")

                            div(ng-show="action.scheduleType == 'repeat'")
                              div Repeating actions have a "cycle", or 2 states which alternate with each other.

                              div State 1
                                div Should last for:
                                  input(type="number", ng-model="action.cycle.states[0].duration", value="1")
                                  select(ng-model="action.cycle.states[0].durationType", ng-options="durationType for durationType in actionDurationTypeOptions", value="{{actionDurationTypeOptions[1]}}")
                                
                                label State Description
                                  input(type="text", ng-model="action.cycle.states[0].message")

                                div(ng-show="action.control") Turn {{action.control.name}}:
                                  label 
                                    input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_state0_controlValue", value="1", ng-model="action.cycle.states[0].controlValue")
                                    | On

                                  label
                                    input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_state0_controlValue", value="0", ng-model="action.cycle.states[0].controlValue")
                                    | Off
                                  

                              div State 2
                                div Should last for:
                                  input(type="number", ng-model="action.cycle.states[1].duration", value="1")
                                  select(ng-model="action.cycle.states[1].durationType", ng-options="durationType for durationType in actionDurationTypeOptions", value="{{actionDurationTypeOptions[1]}}")
                                
                                label State Description
                                  input(type="text", ng-model="action.cycle.states[1].message")

                                div(ng-show="action.control") Turn {{action.control.name}}:
                                  label 
                                    input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_state1_controlValue", value="1", ng-model="action.cycle.states[1].controlValue")
                                    | On

                                  label
                                    input(type="radio", name="gpedit_{{phase._id}}_action_{{action._id}}_state1_controlValue", value="0", ng-model="action.cycle.states[1].controlValue")
                                    | Off

                              // Starting at timeOfDay

                              
                              //- 

                            

                        div.phaseEndDescription
                          label Phase End Description
                          textarea(id="gpedit_{{phase._id}}_enddescription", name="gpedit_{{phase._id}}_enddescription", placeholder="Write a phase end description...", ng-model="phase.phaseEndDescription")
                  
          if (userOwnedDevices.length > 0)
            div.device 
              h5 Device
              p Here's where you can pair up your Bitponics device to your grow plan. After you activate the grow plan, your device will start logging readings and automating any actions defined for your connected accessories.
            ul(class="grid devicelist")
              each device in userOwnedDevices
                li
                  input(id="device_#{device._id}", type='radio', name="device", value="#{device._id}")
                  label(for="device_#{device._id}", class="device") #{device.name}

        input(id="growplans_activate", type="submit", value="Activate Grow Plan")

block footer-scripts

  script
    Bitponics.user = !{JSON.stringify(user.toPublicJSON())};
    Bitponics.growPlans = !{JSON.stringify(growPlans)};
    Bitponics.growSystems = !{JSON.stringify(growSystems)};
    Bitponics.actions = !{JSON.stringify(actions)};
    Bitponics.controls = !{JSON.stringify(controls)};
    Bitponics.sensors = !{JSON.stringify(sensors)};
    Bitponics.plants = !{JSON.stringify(plants)};
    Bitponics.growPlanDefault = !{JSON.stringify(growPlanDefault)};
  
  script(src='//ajax.googleapis.com/ajax/libs/angularjs/1.0.3/angular.min.js')
  script(src='//ajax.googleapis.com/ajax/libs/angularjs/1.0.3/angular-resource.min.js')
  //script(src='/assets/js/libs/jquery/jquery-mobile-angular-adapter-1.1.1.js')
  script(src='/assets/js/libs/es5-shim.min.js')
  script(src='/assets/js/libs/Steps.js')
  script(src='/assets/js/libs/list/src/list.js')
  script(src='/assets/js/libs/list/plugins/fuzzy/list.fuzzySearch.js')
  //- script(src='/assets/js/libs/list/list.min.js')
  script(src='/assets/js/libs/moment.min.js')
  script(src='/assets/js/growplans.js')
  script(src='/assets/js/utils.js')