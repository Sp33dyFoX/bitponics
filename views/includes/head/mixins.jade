//- mixins

mixin requirejs(dataMain)
  - var dataMainVar = dataMain;
  - var angular = CDN('/assets/js/libs/angular/1.2.0/angular.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularFlexslider = CDN('/assets/js/libs/angular-flexslider.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularAnimate = CDN('/assets/js/libs/angular/1.2.0/angular-animate.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularMask = CDN('/assets/js/libs/angular/mask.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularResource = CDN('/assets/js/libs/angular/1.2.0/angular-resource.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularRoute = CDN('/assets/js/libs/angular/1.2.0/angular-route.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularUI = CDN('/assets/js/libs/angular/angular-ui.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularUIBootstrap = CDN('/assets/js/libs/angular/ui-bootstrap-0.5.0.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var angularUISelect2 = CDN('/assets/js/libs/angular/angular-ui-select2.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnApp = CDN('/assets/js/core/bpn.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnControllers = CDN('/assets/js/core/controllers.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnControllersNav = CDN('/assets/js/controllers/nav.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnDirectives = CDN('/assets/js/core/directives.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnDirectivesGraphs = CDN('/assets/js/directives/graphs.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnFilters = CDN('/assets/js/core/filters.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServices = CDN('/assets/js/core/services.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServicesAnalytics = CDN('/assets/js/services/analytics.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServicesDevice = CDN('/assets/js/services/device.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServicesGardenService = CDN('/assets/js/services/garden.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServicesGrowPlanService = CDN('/assets/js/services/grow-plan.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServicesNav = CDN('/assets/js/services/nav.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var bpnServicesSocket = CDN('/assets/js/services/socket.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var d3 = CDN('/assets/js/libs/d3.v2.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var domReady = CDN('/assets/js/libs/requirejs/domReady.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var es5shim = CDN('/assets/js/libs/es5-shim.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var flexslider = CDN('/assets/js/libs/flexslider/jquery.flexslider-min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var feBeUtils = CDN('/assets/js/fe-be/fe-be-utils.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var jquery = CDN('/assets/js/libs/jquery-1.8.2.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var localscroll = CDN('/assets/js/libs/jquery/jquery.localScroll.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var lvlServicesFileUploader = CDN('/assets/js/libs/angular/lvl-xhr-post.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var lvlServicesUUID = CDN('/assets/js/libs/angular/lvl-uuid.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var lvlDirectivesFileUpload = CDN('/assets/js/libs/angular/lvl-file-upload.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var moment = CDN('/assets/js/libs/moment.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var overlay = CDN('/assets/js/shared/overlay.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var scrollto = CDN('/assets/js/libs/jquery/jquery.scrollTo.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var select2 = CDN('/assets/js/libs/jquery/select2.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var selectionOverlay = CDN('/assets/js/controllers/selection-overlay.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var steps = CDN('/assets/js/libs/Steps.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var throttleDebounce = CDN('/assets/js/libs/jquery/jquery.ba-throttle-debounce.min.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var utils = CDN('/assets/js/shared/utils.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();
  - var viewModels = CDN('/assets/js/fe-be/view-models.js', { 'raw' : true }).replace(/\.js\r*\n*$/, '').trim();

  //- These two scripts don't exist... never used?
  //- //var spin = '/assets/js/libs/spin.min.js'
  //- //var socketIO = '/socket.io/socket.io.js'

  //- Dynamic data cannot be passed to CDN() as far as I can tell, so keep requirejs local for now
  // != CDN('/assets/js/libs/require.js', { 'data-main' : '#{dataMainVar}' })
  script(src='/assets/js/libs/require.js', 'data-main'=dataMainVar)
  script
    require.config({
      paths: {
        'angular': '#{angular}',
        'angular-flexslider' : '#{angularFlexslider}',
        'angular-mask' : '#{angularMask}',
        'angularAnimate' : '#{angularAnimate}',
        'angularResource' : '#{angularResource}',
        'angularRoute' : '#{angularRoute}',
        'angularUI' : '#{angularUI}',
        'angularUIBootstrap' : '#{angularUIBootstrap}',
        'angularUISelect2' : '#{angularUISelect2}',
        'bpn' : '#{bpnApp}',
        'bpn.controllers' : '#{bpnControllers}',
        'bpn.controllers.nav' : '#{bpnControllersNav}',
        'bpn.directives' : '#{bpnDirectives}',
        'bpn.directives.graphs' : '#{bpnDirectivesGraphs}',
        'bpn.filters' : '#{bpnFilters}',
        'bpn.services' : '#{bpnServices}',
        'bpn.services.analytics' : '#{bpnServicesAnalytics}',
        'bpn.services.device' : '#{bpnServicesDevice}',
        'bpn.services.garden' : '#{bpnServicesGardenService}',
        'bpn.services.growPlan' : '#{bpnServicesGrowPlanService}',
        'bpn.services.nav' : '#{bpnServicesNav}',
        'bpn.services.socket' : '#{bpnServicesSocket}',
        'd3' : '#{d3}',
        'domReady': '#{domReady}',
        'es5shim': '#{es5shim}',
        'flexslider': '#{flexslider}',
        'fe-be-utils': '#{feBeUtils}',
        'jquery' : '#{jquery}',
        'localscroll': '#{localscroll}',
        'lvl.services.fileUploader': '#{lvlServicesFileUploader}',
        'lvl.services.uuid': '#{lvlServicesUUID}',
        'lvl.directives.fileUpload': '#{lvlDirectivesFileUpload}',
        'moment': '#{moment}',
        'overlay': '#{overlay}',
        'scrollto': '#{scrollto}',
        'select2' : '#{select2}',
        'selection-overlay' : '#{selectionOverlay}',
        'socket.io' : '/socket.io/socket.io',
        'spin' : '/assets/js/libs/spin.min',
        'steps': '#{steps}',
        'throttle-debounce': '#{throttleDebounce}',
        'utils': '#{utils}',
        'view-models': '#{viewModels}'
      },
      shim: { 
        'angular': { 
          deps: [ ], 
          exports: 'angular' 
        }, 
        'angularResource': { 
          deps: [ 'angular' ] 
        }, 
        'angularAnimate': { 
          deps: [ 'angular' ] 
        },
        'angularRoute': { 
          deps: [ 'angular' ] 
        },
        'angularUISelect2': {
          deps: [ 'angular', 'select2' ] 
        },
        'angularUI': { 
          deps: [ 'angular' ] 
        },
        'angularUIBootstrap': { 
          deps: [ 'angular' ] 
        },
        'd3' : {
          exports : 'd3'
        },
        'jquery': { 
          exports : '$'
        },
        'socket.io': {
          exports: 'io'
        },
        'spin' : {
          exports : "Spinner"
        },
        'flexslider' : {
          deps: ['jquery']
        },
        'angular-flexslider' : {
          deps: ['angular', 'flexslider']
        },
        'throttle-debounce' : {
          deps: ['jquery']
        },
        'localscroll' : {
          deps: ['jquery']
        },
        'scrollto' : {
          deps: ['jquery']
        },
        'selection-overlay' : {
          deps: ['angular']
        },
        'angular-mask' : {
          deps: ['angular']
        }
      }
    });


//- //TODO: work in progress, not used yet
mixin overlayTemplate(toggleVarName, itemsArray, headingText, itemText, classNames)
  div(ng-hide="!#{toggleVarName}", class="overlay #{classNames}")
    div(class="close btn", ng-click="toggleOverlay('#{toggleVarName}')")
      | <i class="icon-glyph-new icon-__72_x_999999" aria-hidden="true"></i>
    h3.page-heading Add a #{itemText}
    div(ng-controller="overlayCtrl")
      input(class="search no-validate", ng-model="query", ng-change="search()", placeholder="Search...")
      div(ng-hide="filteredItems.length") 
        label(href="#", class="add btn", ng-click="addPlant(this)")
          | Add New #{itemText}
          | <i class="icon-glyph-new icon-__60_plus_white" aria-hidden="true"></i>
      ul.pagination
        li(ng-class="{disabled: currentPage == 0}")
          a(href, ng-click="prevPage()") « Prev
        li(ng-repeat="n in range(pagedItems.length)", ng-class="{active: n == currentPage}")
          a(href, ng-click="setPage()", ng-bind="n + 1") 1
        li(ng-class="{disabled: currentPage == pagedItems.length - 1}")
          a(href, ng-click="nextPage()") Next »

      ul(class="grid plantlist")
        //- li(ng-repeat="plant in filteredPlantList | orderBy:name")
        li(ng-repeat="plant in pagedItems[currentPage] | orderBy:sortingOrder:name")
          img(src="/assets/img/placeholders/placeholder_plant.jpg", alt="{{plant.name}}")
          dl
            dt Type:
            dd {{plant.name}}
          input(id="search_{{plant._id}}", type='checkbox', name="plants", value="{{plant._id}}", ng-model="selected.plant[plant._id]", ng-change="updateSelectedPlants()", checked="selected.plant[plant._id]")
          label(for="search_{{plant._id}}", class="plant btn next-step-btn") Select
            //- | <i class="icon-glyph icon-glypharrow" aria-hidden="true"></i>
      
      ul.pagination
        li(ng-class="{disabled: currentPage == 0}")
          a(href, ng-click="prevPage()") « Prev
        li(ng-repeat="n in range(pagedItems.length)", ng-class="{active: n == currentPage}")
          a(href, ng-click="setPage()", ng-bind="n + 1") 1
        li(ng-class="{disabled: currentPage == pagedItems.length - 1}")
          a(href, ng-click="nextPage()") Next »